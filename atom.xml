<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zhoulin的IT工作之旅]]></title>
  <link href="http://blog.itzhoulin.com/atom.xml" rel="self"/>
  <link href="http://blog.itzhoulin.com/"/>
  <updated>2015-01-11T01:35:43+08:00</updated>
  <id>http://blog.itzhoulin.com/</id>
  <author>
    <name><![CDATA[zhoulin]]></name>
    <email><![CDATA[zhoulin@itzhoulin.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Workflow for Small Team]]></title>
    <link href="http://blog.itzhoulin.com/blog/2015/01/10/git-workflow-for-small-team/"/>
    <updated>2015-01-10T22:21:07+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2015/01/10/git-workflow-for-small-team</id>
    <content type="html"><![CDATA[<p>本文主要是讲述我目前所在小团队的一种git工作流，我们团队对于git都是新手，很新很新的新手，这里跟大家分享一下我们的流程和相关操作命令，也不确定这种是否真是适合我们的工作流方式，期待高手指点。</p>

<p><em>PS:对于git常用操作流程和一些概念见博文<a href="http://blog.itzhoulin.com/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong/">Git常用操作汇总</a></em></p>

<!-- more -->


<p>git太博大精深了，不同的团队规模、不同时期或者其他因素都可能会有不同的最适宜的工作流。目前我们团队固定开发人员4人，不定期支撑1人（高手），没有专职的测试QA等，主要是针对已有产品的二次开发，因此更多的是部分功能上的改造和一些bug的修复，因此基本是发现了、有需求了、谁手头比较空余就来负责这个任务。</p>

<p>下图是一个简单的流程图，这里面主要是两种人物角色，A是开发人员，B是除A外的其他开发人员，这里兼职测试（后文标题以<strong>人员.操作步骤</strong>）。本文以gitlab里面的库<a href="http://git.itzhoulin.com/zhoulin/test.git">http://git.itzhoulin.com/zhoulin/test.git</a>为例，远程库除了master分之外还有develop分支，<strong><em>master存放随时可以发布的版本，develop存放经测试通过的任务</em></strong>。
<img class="left" src="http://blog.itzhoulin.com/images/git-workflow.png" title="git-workflow" ></p>

<h2>A.1克隆代码到本地</h2>

<p>如果A本地还没有远程库的代码，执行下述clone操作获取远程库所有代码信息：</p>

<pre><code>git clone http://git.itzhoulin.com/zhoulin/test.git
</code></pre>

<p>如果A本地已经有代码，则只需<strong>更新所有代码到最新版</strong>：</p>

<pre><code>#更新远程库所有信息到本地
git fetch origin
</code></pre>

<h2>A.2主分支基础上新建功能分支branchA</h2>

<p>develop作为开发的主分支，所有开发都需要基于该分支的最新代码进行开发，后续开发完成也合并到该分支。因此首先以远程库中的develop的最新代码为蓝本新建本地branchA分支。</p>

<p><em>PS:关于branchA的命名我们比较倾向于以成员名加日期或者所开发的功能点。</em></p>

<pre><code>#基于远程develop库新建branchA分支，并切换
git checkout -b branchA origin/develop
</code></pre>

<h2>A.4进行开发并提交到branchA</h2>

<p>A用户完成开发任务后提交到本地branchA分支，<strong>强烈建议不要等到所有开发完成后再提交，而是每一次提交都是针对一个不可分割的点，多几次提交以便于保留更多状态</strong>。</p>

<pre><code>#添加修改的文件
git add .
#提交,会调用默认文本处理程序，请在其中详细注明所做更改以及本次修改是否需要额外的部署操作
git commit
</code></pre>

<p>等到所有开发完成后，并将该分支推送到远程仓库，方便测试人员从远程仓库拉取到本地进行测试。</p>

<pre><code>git  push -u origin branchA
</code></pre>

<p>这样操作之后，所有用户都能看到分支branchA，通知B用户进行测试。</p>

<h2>B.1从远程拉取测试分支</h2>

<p>B用户需要先从远程库拉取需要测试的分支branchA到本地分支branchAtest：</p>

<pre><code>git fetch origin branchA:branchAtest
</code></pre>

<p>测试之后如果发现不通过，则将相关信息反馈给A用户进行重新修复开发；</p>

<h2>B.4合并branchA</h2>

<p>如果通过，就可以考虑将该分支合并到主库develop，同时删除该分支。</p>

<pre><code>#切换到develop分支（假设期间develop分支没有变更）
git checkout develop
#合并本次开发的代码到develop
git merge branchAtest
#如果没有冲突直接推送到远程
git push -u origin develop
</code></pre>

<p><strong>注意:</strong>
如果在完成测试前develop分支已经发生变更，需要先更新develop分支之后再执行合并操作，合并过程中可能会有冲突发生，需要进行手动冲突解决，然后也需要进行一定范围测试保证本次更新不会跟其他更新有冲突。</p>

<h4>如果有冲突，手动解决后重新测试提交</h4>

<pre><code>#冲突的文件需要重新添加到暂存区，不冲突的会自动加入到暂存区
git add conflictFile1
git commit
git push -u origin develop
</code></pre>

<h4>如果期间develop有过更新</h4>

<pre><code>#需要先更新本地develop代码
git checkout develop
git pull
#再合并代码
git merge branchA
#如遇冲突解决方法同上。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用操作汇总]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong/"/>
    <updated>2014-11-09T21:37:14+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong</id>
    <content type="html"><![CDATA[<p>关于git其实用的时间还很短，两个月前因为异地多个环境需要同步开发和维护，因此试着用了git，代码使用的开源中国的私有仓库。关于github现在更多的只是阅读别人的代码学习别人的代码，还没有实实在在贡献过代码，晚上看伯乐在线推荐了一篇关于git的文章，原文连接是<a href="http://yanhaijing.com/git/2014/11/01/my-git-note/">我的git笔记</a>,先根据这个再加上我前段时间已经实实在在用上了的做一些我的补充说明。感谢原作者。</p>

<!-- more -->


<h1>推荐两本书：</h1>

<p>作者是 北京群英汇信息技术有限公司 高级顾问 蒋鑫</p>

<p><a href="http://www.worldhello.net/gotgit/">Git权威指南</a></p>

<p><a href="http://www.worldhello.net/gotgithub/">GotGitHub</a></p>

<h1>配置</h1>

<p>首先是配置帐号信息</p>

<pre><code>git config --global user.name yanhaijing
git config --global user.email yanhaijing@yeah.net

git config --list    #查看配置的信息

git help config    #获取帮助信息
</code></pre>

<h4>配置自动换行（自动转换坑太大）</h4>

<pre><code>git config --global core.autocrlf input    #提交到git是自动将换行符转换为lf
</code></pre>

<h4>配置密钥</h4>

<pre><code>ssh-keygen -t rsa -C yanhaijing@yeah.net     #生成密钥

ssh -T git@github.com     #测试是否成功
</code></pre>

<h1>新建仓库</h1>

<pre><code>git init                                    #初始化
git status                                  #获取状态
#上面的命令可以查看当前所处的分支，当前工作区变更记录等，很常用
git add file                                #.或*代表全部添加
git commit -m "message"                     #此处注意乱码
git remote add origin git@github.com:yanhaijing/test.git   #添加源
git push -u origin master                   #push同时设置默认跟踪分支
</code></pre>

<h1>从现有仓库克隆</h1>

<pre><code>git clone git://github.com/yanhaijing/data.js.git   
git clone git://github.com/schacon/grit.git mypro     #克隆到自定义文件夹
</code></pre>

<h1>本地</h1>

<pre><code>git add *                 #跟踪所有变更文件：编辑和新增

rm *&amp;git rm *             #移除文件
git rm -f *               #移除文件
git rm --cached *         #取消跟踪
git mv file_from file_to  #重命名跟踪文件

git log                   #查看提交记录

git commit                #提交更新
git commit -m 'message'
git commit -a             #把所有已经跟踪过的文件暂存并提交
### 上述命令的一个关键是已经跟踪过的文件，而对于新增文件是不会将其添加跟踪并提交的
git commit --amend        #修改最后一次提交的message信息

git reset HEAD *          #取消已经暂存(git add)的文件

git checkout -- file      #取消对文件的修改（从暂存区去除file）
git checkout branch|tag|commit -- file_name   #从仓库取出file覆盖当前分支
git checkout -- .         #从暂存区去除文件覆盖工作区
</code></pre>

<h1>分支</h1>

<pre><code>git branch                  #列出本地分支
git branch -r               #列出远端分支
git branch -a               #列出所有分支
git branch -v               #查看各个分支最后一个提交对象的信息
git branch --merge          #查看已经合并到当前分支的分支
git branch --no-merge       #查看为合并到当前分支的分支

git branch test             #新建test分支
git checkout test           #切换到test分支
git checkout -b test        #新建+切换到test分支
git checkout -b test dev    #基于dev新建test分支，并切换

git branch -d test          #删除test分支
git branch -D test          #强制删除test分支

git merge test              #将test分支合并到当前分支
git rebase master           #将master分之上超前的提交，变基到当前分支
</code></pre>

<h1>远端</h1>

<pre><code>git fetch origin                               #更新本地数据，拉取远端所有分支
git fetch originname branchname                #拉取远端上指定分支
git fetch originname branchname:temp           #拉取远端分支到本地分支temp
## 这个是我目前协同主要用到的，我会先将远端同事的分支先拉去到本地临时分支
##temp，再将该temp与我自己的分支合并。

git merge originname branchname                #合并远端上指定分支
git push originname branchname                 #推送到远端上指定分支
git push originname localbranch:serverbranch   #推送到远端上指定分支

git checkout -b test origin/dev                #基于远端dev新建test分支

git push origin :server                        #删除远端分支
</code></pre>

<h1>源</h1>

<p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</p>

<p>个人开发时，多源用的可能不多，但多源其实非常有用。</p>

<pre><code>git remote add origin1 git@github.com:yanhaijing/data.js.git

git remote                            #显示全部源
git remote -v                         #显示全部源+详细信息

git remote rename origin1 origin2     #重命名

git remote rm origin1                 #删除

git remote show origin1               #查看指定源的全部信息
</code></pre>

<h1>标签</h1>

<p>当开发到一定阶段时，给程序打标签是非常棒的功能。</p>

<pre><code>git tag                                      #列出现有标签  
git tag v0.1                                 #新建标签
git tag -a v0.1 -m 'my version 1.4'          #新建带注释标签

git checkout tagname                         #切换到标签

git push origin v1.5                         #推送分支到源上
git push origin --tags                       #一次性推送所有分支

git tag -d v0.1                              #删除标签
git push origin :refs/tags/v0.1              #删除远程标签
</code></pre>

<h1>比较diff</h1>

<p>在没有使用github等web界面来查看某一次提交的代码级别的变更记录时，使用git diff就相当有作用。</p>

<h4>查看当前版本变化情况</h4>

<pre><code>git status
位于分支 master
您的分支与上游分支 'origin/master' 一致。

尚未暂存以备提交的变更：
  （使用 "git add &lt;file&gt;..." 更新要提交的内容）
  （使用 "git checkout -- &lt;file&gt;..." 丢弃工作区的改动）

    修改:         soft-install/calamari-client-build.md

未跟踪的文件:
  （使用 "git add &lt;file&gt;..." 以包含要提交的内容）

    git-guide/
    zmanda_guides/

修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
</code></pre>

<h4>查看已跟踪文件修改</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zhoulin@gcizhoulin:~/Documents/guides-markdown$ git diff README.md
</span><span class='line'>diff --git a/README.md b/README.md
</span><span class='line'>index ae4e84e..2e76687 100644
</span><span class='line'>--- a/README.md
</span><span class='line'>+++ b/README.md
</span><span class='line'>@@ -28,4 +28,7 @@ The main folders are:
</span><span class='line'> 
</span><span class='line'> * 直接tab后接代码就能够以代码方式显示，**要求：**代码前后各有一个回车
</span><span class='line'> * 前后使用**```**来分割，前后如*至少*有一处有空行则类似pre显示代码；如果是前有
</span><span class='line'>-* 如果是在**列表项**里面添加代码，请务必用**```**来区别代码.
</span><span class='line'>\ No newline at end of file
</span><span class='line'>+* 如果是在**列表项**里面添加代码，请务必用**```**来区别代码.
</span><span class='line'>+
</span><span class='line'>+### 2.标题显示
</span><span class='line'>+要显示标题样式，除了使用#来标记外，还需要再#标记和文字之间加空格
</span><span class='line'>\ No newline at end of file</span></code></pre></td></tr></table></div></figure>


<h4>对比两次版本的差异</h4>

<pre><code>#首先获取两版本的版本号
git log
#若是查看最近几次的记录后接- 加上数字，如
git log -2
#输出如下:
zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git log -2
commit ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Sat Aug 2 13:15:40 2014 +0800

#89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding

commit c80c87c358a26d5eaaca81e6bc82a87203ef2337
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Fri Aug 1 20:31:50 2014 +0800

#88: Ubuntu packaging: install python3-tk as a fallback to Qt.

#要对比上面两次版本的区别命令如下:
zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git diff ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd c80c87c358a26d5eaaca81e6bc82a87203ef2337
diff --git a/src/frontend/utils/misc.py b/src/frontend/utils/misc.py
index 3293bb3..23d77f6 100644
--- a/src/frontend/utils/misc.py
+++ b/src/frontend/utils/misc.py
@@ -26,12 +26,7 @@ def decodePrivateLink(link):
 assert len(path) == 1, "Invalid private link {}.".format(link)

 path = path[0].encode("utf-8")
-
-    toDecode = base64.urlsafe_b64decode(path)
-    try:
-        decoded = toDecode.decode("utf-8")
-    except UnicodeDecodeError:
-        decoded = toDecode.decode("gb18030")
+    decoded = base64.urlsafe_b64decode(path).decode("utf-8")

 scheme = scheme.lower()
 if scheme == "thunder":
</code></pre>

<h4>查看某一次版本详细信息（含与上一次对比）</h4>

<pre><code>git show
#输出为:
commit ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Sat Aug 2 13:15:40 2014 +0800

#89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding

diff --git a/src/frontend/utils/misc.py b/src/frontend/utils/misc.py
index 23d77f6..3293bb3 100644
--- a/src/frontend/utils/misc.py
+++ b/src/frontend/utils/misc.py
@@ -26,7 +26,12 @@ def decodePrivateLink(link):
     assert len(path) == 1, "Invalid private link {}.".format(link)

     path = path[0].encode("utf-8")
-    decoded = base64.urlsafe_b64decode(path).decode("utf-8")
+
+    toDecode = base64.urlsafe_b64decode(path)
+    try:
+        decoded = toDecode.decode("utf-8")
+    except UnicodeDecodeError:
+        decoded = toDecode.decode("gb18030")

 scheme = scheme.lower()
 if scheme == "thunder":
</code></pre>

<p>后面可以跟具体的<strong>版本号</strong></p>

<h4>查看某一个文件的变更记录</h4>

<pre><code>zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git log --pretty=oneline src/frontend/utils/misc.py
#输出如下：
ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd #89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding
b8974b512f9b43336fe2bc86f27143f6b2cfd4f5 trivial: pep8 fix
97e400716bd7b3f04f0d601ceef00a46ff5c8725 taskClassFilter use ENUMs instead of magic numbers in QML
bc2c822a33dc9ecd72d0ff7ec0b3c3884d3995ea split utils.misc to utils.system
0cfc211af54f0a4271e22ff87eeb9c0bea04bbb0 implement simplecache
4a42d59560d8580e41c1807597c9fb5c9b985482 place misc under utils
</code></pre>

<h1>参考资料</h1>

<ul>
<li><a href="http://gitref.org/zh/index.html">Git参考手册</a></li>
<li><a href="http://www.mceiba.com/tool/git-cheat-sheet.html">Git简明手册</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">Git Magic</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
<li><a href="http://git-scm.com/book/en/v2">Pro Git</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git-简明指南</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/">learnGitBranching</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph监控管理-inkscope安装手册]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/11/09/cephjian-kong-guan-li-inkscopean-zhuang-shou-ce/"/>
    <updated>2014-11-09T20:40:21+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/11/09/cephjian-kong-guan-li-inkscopean-zhuang-shou-ce</id>
    <content type="html"><![CDATA[<p>inkscope是一个ceph的监控和管理接口，使用nosql解决方案，使用mongodb存储实时热数据和历史数据，两种数据来源于不同的收集器。 官方的安装手册其实已经很详尽了，只是有那么一点点坑，所以把 关键一点的记录一下，兴许对你有用</p>

<!-- more -->


<h1>prequisites Inkscope needs severals other products:</h1>

<ul>
  <li>
    <a style="color: #4183c4;" href="http://httpd.apache.org/">Apache 2</a>
  </li>
  <li>
    <a style="color: #4183c4;" href="http://mongodb.org/">MongoDb</a>
  </li>
</ul>


<p>
Download all the directories of the inkScope project to a folder of your choice,in the following stages, we have chosen <strong>/var/www/inkscope</strong>.</p>

<h1>Installation</h1>

<h2>Installation of inkscopeViz Apache V2 is already installed</h2>

<ol class="task-list list-paddingleft-2">
  <li>
    Choose a tcp port for inkScope<em>in the following stages, we have chosen 8080</em>
  </li>
  <li>
    Modify Apache conf file /etc/apache2/port.conf to add the following line <pre>Listen 8080</pre>
  </li>
  
  <li>
    Create a virtual host named <strong>inkScope</strong>in the folder <em>/etc/apache2/sites-available</em> , create a file <em>inkScope.conf</em> with this content:
     <pre>&lt;VirtualHost *:8080&gt;
    ServerName  localhost
    ServerAdmin webmaster@localhost

    DocumentRoot {inkScope_folder}
    &lt;Directory "{inkScope_folder}"&gt;
        Options All
        AllowOverride All
    &lt;/Directory&gt;

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory "/usr/lib/cgi-bin"&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;

    WSGIScriptAlias /inkscopeCtrl {inkScope_folder}/inkscopeCtrl/inkscopeCtrl.wsgi
    &lt;Directory "{inkScope_folder}/inkScopeCtrl"&gt;
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    ProxyRequests Off  # we don't want a "forward proxy", but only a "Reverse proxy"
    ProxyPass /ceph-rest-api/ {ceph_rest_api_url}

    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;</pre> 

Be sure to modify 
    
    <em>{inkScope_folder}</em> and <em>{ceph_rest_api_url}</em> with the appropriate values <span style="color: #ff0000;">这里ceph_rest_api_url应该是完成API路径，如：http://10.1.2.3:5000/api/v0.1/该地址即为启动了ceph_rest_api进程的节点IP加上端口和api版本即可。</span>
  </li>
  <li>
    Enable proxy module in Apache (if not already enabled) <pre>sudo a2enmod proxy_http
sudo service apache2 restart</pre>
  </li>
  
  <li>
    Enable InkScope virtual host: <pre>sudo a2ensite inkScope</pre> No need to restart Apache at this time
  </li>
</ol>


<h2>Installation of inkscopeCtrl</h2>

<ol class="task-list list-paddingleft-2">
    <li>
      install mod-wgsi for Apache <pre>sudo apt-get install libapache2-mod-wsgi</pre>
    </li>
    
    <li>
      install python dependencies : pymongo, python-requests, and flask 0.10.1if pip is not installed, <pre>sudo apt-get install python-pip</pre> for pymongo: 
      
      <pre>sudo easy_install pymongo or sudo pip install pymongo</pre> for flask: 
      
      <pre>sudo easy_install flask or sudo pip install flask</pre> If you are running Ubuntu 12.04 or an earlier version, you need to get your python-requests module updated to a version >= 1.1.0.
    </li>
    
    <li>
      run <em>install.sh</em> in inkscopeCtrl directory to copy conf files in /opt/inkscope/etcmodify /opt/inkscope/etc/inkscopeCtrl.conf to change: <ul class="task-list list-paddingleft-2">
        <li>
          mongoDB parameters (mainly mongodb_host)
        </li>
        <li>
          radosgw parameters ( Do not forget to grant the required capabilities [usage, users, metadata, buckets] to the admin-user).
        </li>
      </ul>
    </li>

<span style="color: #ff0000;">这里请注意，原版的配置文件模板有点问题，配置文件每一项配置务必要以逗号结束，最后一项无需逗号， 其次radosgw_url应以http开头，radosgw_admin的值则为admin，参考模板如下 ：</span> 

<pre>{
 "mongodb_host" : "10.1.11.21", 
"mongodb_port" : "27017", 
"mongodb_user" :"ceph", 
"mongodb_passwd":"", 
"radosgw_url": "http://10.1.36.13", 
"radosgw_admin": "admin", 
"radosgw_key": "11111", 
"radosgw_secret": "11111",   
"is_mongo_replicat" : 0, 
"mongodb_set" :"host_mongodb1:port,host_mongodb2:port,host_mongodb3:port",
"mongodb_replicaSet" : "replicaset_name", 
"mongodb_read_preference" : "ReadPreference.{your_read_preference_choice}" 
} </pre>
</ol>


<h2>Installation of InkscopeProbe</h2>

<p><strong><em>InkscopeProbe</em></strong> collects Ceph cluster metrics and host metrics and put them in a database named as the cluster and put the data in dedicated mongodb collection. The datamodel is described in datamodel.txt and datamodeloverview.odp</p>

<h3>Prerequisites</h3>

<ul class="task-list list-paddingleft-2">
  <li>
    needs a <a style="color: #4183c4;" href="http://www.mongodb.org/">mongodb</a> database&#8212;-<span style="color: #ff0000;">这里整个项目使用同一个mongodb，因此需要开启inkscope所在节点mongodb的远程连接，方法是编辑mongodb配置文件，默认位置是/etc/mongodb.conf,将bind_ip修改为0.0.0.0，取消port的注释，默认端口是27017，重启mongodb服务器即可。</span>
  </li>
  <li>
    needs a <strong>ceph-rest-api</strong> active on a machine
  </li>
  <li>
    needs package <strong>python-dev</strong> (on every host)sudo apt-get install python-dev
  </li>
  <li>
    needs <strong>psutil</strong> python module (on every host)sudo easy_install psutil
  </li>
  <li>
    needs <strong>pymongo</strong> python module (on every host)sudo easy_install pymongo
  </li>
  <li>
    <span style="color: #ff0000;">由于sysprobe和cephprobe可能需要再非inkscope节点上部署，因此凡是需要部署probe服务的节点都需要安装python-dev,psutil,pymongo。</span>
  </li>
</ul>


<p>  </ol>
</ol></p>

<h3>Installation</h3>

<p> run <strong><em>install.sh</em></strong> in inkscopeProbe directory to copy conf files in /opt/inkscope/etc and scripts in/opt/inkscope/bin You could make a link in /etc/init.d Two daemons are defined: <ul class="task-list list-paddingleft-2">
  <li>
    sysprobe to collect system information; it must be installed on each machine running Ceph nodes (mon, mds, osd&hellip;)
  </li>
  <li>
    cephprobe to collect ceph cluster information; it must be installed on only one machine running a Ceph node
  </li>
  <li>
    <span style="color: #ff0000;">将配置文件以及脚本(包含daemon.py)拷贝到需要启动probe服务的节点，start该服务即可。</span>
  </li>
</ul></p>

<h3>SysProbe configuration</h3>

<p>Sysprobe collect and push the informations into a mongodb. The config file should be stored at /opt/inkscope/etc/sysprobe.conf and should look like this (json format). The unit of the refresh times is second.</p>

<p>You must adapt the values to your environment (mainly mongodb_host).</p>

<pre>    {
    "mongodb_host" : "10.1.11.21",
    "is_mongo_replicat" : 0,
    "mongodb_set" : "mongodb0:27017,mongodb1:27017,mongodb2:27017",
    "mongodb_replicaSet" : "replmongo0",
    "mongodb_read_preference" : "ReadPreference.SECONDARY_PREFERRED",
    "mongodb_port" : 27017,
    "is_mongo_authenticate" : 0,
    "mongodb_user":"ceph",
    "mongodb_passwd":"monpassword",
    "cluster": "ceph",
    "mem_refresh": 60,
    "swap_refresh": 600,
    "disk_refresh": 60,
    "partition_refresh": 60,
    "cpu_refresh": 30,
    "net_refresh": 30,
    "mem_window": 1200,
    "swap_window": 3600,
    "disk_window": 1200,
    "partition_window": 1200,
    "cpu_window": 1200,
    "net_window": 1200
    }</pre>


<p>Sysprobe is defined as a daemon:</p>

<pre><code>sysprobe.py start|stop|restart
</code></pre>

<h3>CephProbe configuration</h3>

<p>A Ceph info collector (cephprobe.py) should be run on a node thant can access to ceph-rest-api and the mongodb.</p>

<p>The config file be stored at /opt/inkscope/etc/cephprobe.conf and should look like this (json format). The unit of the refresh times is second.</p>

<p>You must adapt the values to your environment (mainly mongodb_host and ceph_rest_api).</p>

<pre>    {
      "mongodb_host" : "10.1.11.21",
      "is_mongo_replicat" : 0,
      "mongodb_set" : "mongodb0:27017,mongodb1:27017,mongodb2:27017",
      "mongodb_replicaSet" : "replmongo0",
      "mongodb_read_preference" : "ReadPreference.SECONDARY_PREFERRED",
      "mongodb_port" : 27017,
      "is_mongo_authenticate" : 0,
      "mongodb_user":"ceph",
      "mongodb_passwd":"monpasswd",
      "cluster" : "ceph",
      "ceph_conf": "/etc/ceph/ceph.conf",
      "ceph_rest_api": "10.1.36.11:5000",
      "status_refresh": 3,
      "osd_dump_refresh": 3,
      "pg_dump_refresh": 60,
      "crushmap_refresh": 60,
      "df_refresh": 60,
      "cluster_window": 1200,
      "osd_window": 1200,
      "pool_window": 1200
    }</pre>


<p>Cephprobe is defined as a daemon:</p>

<pre><code>cephprobe.py start|stop|restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy a Blog Using Octopress Hosted in Github]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/08/24/deploy-a-blog-using-octopress-hosted-in-github/"/>
    <updated>2014-08-24T14:28:54+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/08/24/deploy-a-blog-using-octopress-hosted-in-github</id>
    <content type="html"><![CDATA[<p>这里将详细讲解一下如何利用octopress在github上部署一个博客程序，既方便写博客又无需考虑托管问题，同时天然的在本地有一个备份，所有操作都基于git，有无限版本控制。使用markdown书写具体的博客内容，自带代码高亮解决方案。</p>

<p>github使用的博客引擎是<strong>Jekyll</strong>，octopress也是利用Jekyll引擎来开发博客的，因此生成的博客系统可以直接在github pages上运行良好。</p>

<!-- more -->


<h2>环境说明:</h2>

<p>本地环境是在ubuntukylin14.04.1系统下部署的，其他系统也没问题，只需要支持ruby，git</p>

<p>本文主要参照octopress官网和破船之家的教程写的。</p>

<h2>目录</h2>

<ol>
<li><a href="#ruby_git_install">Ruby等依赖安装</a></li>
<li><a href="#octopress_install">octopress安装</a></li>
<li><a href="#octopress_config">octopress配置</a></li>
<li><a href="#deploy2github">部署到github</a></li>
<li><a href="#post_blog">发布博客</a></li>
<li><a href="#summary">小结</a></li>
</ol>


<h2>1.Ruby等依赖安装</h2>

<p><a id="ruby_git_install">Ruby </a>需要1.9.3版本的，同时由于Jekyll和octopress都是ruby写的，会有诸多ruby依赖，建议切换ruby源为国内源。对于git版本没有太大要求。</p>

<h4>Install Ruby</h4>

<p>查看ruby版本方法如下</p>

<pre><code>ruby --version
</code></pre>

<p>如果版本符合要求则进入下一步，否则请参照<a href="https://www.ruby-lang.org/en/downloads/">官方手册安装ruby</a>或者使用<a href="http://octopress.org/docs/setup/rvm/">RVM</a>来安装。</p>

<h4>安装bundler</h4>

<p>bundle可以自动解决依赖，安装方法如下：</p>

<pre><code>gem install bundler
</code></pre>

<p>建议国内用户切换gem源为国内源，方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#删除官方源</span>
</span><span class='line'>gem <span class="nb">source</span> -r https://rubygems.org/
</span><span class='line'><span class="c">#添加淘宝源</span>
</span><span class='line'>gem <span class="nb">source</span> -a http://ruby.taobao.org/
</span><span class='line'><span class="c">#查看当前源</span>
</span><span class='line'>gem <span class="nb">source</span> -l
</span></code></pre></td></tr></table></div></figure>


<h4>安装git</h4>

<p>如果已经安装git，执行命令返回值为具体版本，否则请自行<a href="http://git-scm.com/">安装git</a></p>

<pre><code>git --version
#git version 1.9.1
</code></pre>

<h2>2.octopress安装</h2>

<p><a id="octopress_install">octopress </a>的安装也比较简单，下载源码后会有Gemfile文件来指示所有依赖，使用bundle即可。</p>

<h4>下载源码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<h4>安装octopress</h4>

<p>使用bundle自动安装，将下面的内容写入文件Gemfile中放在站点仓库根目录下</p>

<pre><code>source "http://ruby.taobao.org"
gem 'github-pages'
</code></pre>

<p>这样执行命令<strong><em>bundle install</em></strong>就会自动安装所有octopress及其所有依赖。</p>

<p><strong>注意：</strong>
如果上面的命令执行失败，提示下面的错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>        /usr/bin/ruby1.9.1 extconf.rb
</span><span class='line'>/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in <span class="sb">`</span>require<span class="err">&#39;</span>: cannot load such file -- mkmf <span class="o">(</span>LoadError<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>请执行下面的命令安装ruby1.9.1-dev</p>

<pre><code>sudo apt-get install ruby1.9.1-dev
</code></pre>

<h4>安装octopress默认主题</h4>

<pre><code>rake install
</code></pre>

<p>在octopress根目录下的Rakefile定义了如何将octopress跟Jekyll连接起来，rake打包了一些常见的如发布博客主题、生成博客数据、发布博客等一系列命令来简化博主的操作。直接使用Jekyll每一个任务都需要不少命令和文件编辑。</p>

<h4>tips： 保持Jekyll最新</h4>

<p>由于Jekyll更新比较频繁，为了确保你在本地调试的时候看到的网站效果跟GitHub Pages上的一致，务必时常更新Jekyll，推荐使用bundle更新，命令如下：</p>

<pre><code>bundle update
</code></pre>

<h2>3.octopress配置</h2>

<p>实际上octopress已经很好的隐藏了Jekyll的诸多配置，我们只需要简单操作几个文件。octopress就会自动生成相应的Jekyll配置。这里我们仅仅讲解一下_config.yml文件的部分配置项，具体请看官网<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a>。</p>

<p>该文件的配置分为三大部分:Main config、Jekyll&amp;Plugin、3rd Party Settings。</p>

<h4>Main config</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                <span class="c1"># For rewriting urls for RSS, etc</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>              <span class="c1"># Used in the header and title tags</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span>           <span class="c1"># A description used in the header</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span>             <span class="c1"># Your name, for RSS, Copyright, Metadata</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span>      <span class="c1"># Search engine for simple site search</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>        <span class="c1"># A default meta description for your site</span>
</span><span class='line'><span class="l-Scalar-Plain">date_format</span><span class="p-Indicator">:</span>        <span class="c1"># Format dates using Ruby&#39;s date strftime syntax</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_rss</span><span class="p-Indicator">:</span>      <span class="c1"># Url for your blog&#39;s feed, defauts to /atom.xml</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_email</span><span class="p-Indicator">:</span>    <span class="c1"># Url to subscribe by email (service required)</span>
</span><span class='line'><span class="l-Scalar-Plain">category_feeds</span><span class="p-Indicator">:</span>     <span class="c1"># Enable per category RSS feeds (defaults to false in 2.1)</span>
</span><span class='line'><span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>              <span class="c1"># Email address for the RSS feed if you want it.</span>
</span></code></pre></td></tr></table></div></figure>


<p>注释说明已经很详细了，有一点需要强调的是，<strong>如果你想启用自己的域名来访问，这里的url务必修改为你自己的域名，否则即便你添加了CNAME文件，使用rake部署的时候也不会部署该CNAME文件</strong>。</p>

<p><strong><em>建议：</em></strong></p>

<ul>
<li>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。涉及到的文件比较多，小心删除，如果以发表博客，_deploy目录下无需手动删除，重新生成博客后会自动删除。</li>
<li>同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。from<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的博文中—配置</a></li>
</ul>


<p><strong>关于另外两部分配置后面会有文详细介绍，这里略过。</strong></p>

<h2>4.部署到github</h2>

<p><a id="deploy2github">github pages</a>支持托管，地址为<a href="https://pages.github.com/">https://pages.github.com/</a>。在这个页面你只需要大概了解一下什么事github page，如何申请就行了。</p>

<ol>
<li>新建一个仓库，名为your_user_name.github.io或organization.github.io，当然也可以是project，这个方法有点不一样，这里以your_user_name.github.io为例。</li>
<li>在octopress根目录执行 <em>rake setup_github_pages</em> ，按照要求输入仓库地址等，这个命令会在跟目录下新建_deploy目录，这个会push到仓库的master分支，也就是访问博客的文件。</li>
<li>生成博客， <em>rake generate</em> 这个会按照既定规则生成静态文件的博客。</li>
<li>发布博客， <em>rake deploy</em> 将前一步生成的bo9ke拷贝到_deploy目录并push到github</li>
</ol>


<p><strong>注意：</strong></p>

<p>第一次执行 <em>rake deploy</em> 的时候会报错如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> ! <span class="o">[</span>rejected<span class="o">]</span>        master -&gt; master <span class="o">(</span>non-fast-forward<span class="o">)</span>
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;https://github.com/yeesterbunny/yeesterbunny.github.com.git&#39;</span>
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Merge the remote changes <span class="o">(</span>e.g. <span class="s1">&#39;git pull&#39;</span><span class="o">)</span>
</span><span class='line'>hint: before pushing again.
</span><span class='line'>hint: See the <span class="s1">&#39;Note about fast-forwards&#39;</span> in <span class="s1">&#39;git push --help&#39;</span> <span class="k">for</span> details.
</span></code></pre></td></tr></table></div></figure>


<p>解决方法是手动进入_deploy目录手动强制push一次。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>octopress/_deploy
</span><span class='line'>git pull origin +master
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>这样再次执行就不会报错了。</p>

<h4>博客本地预览</h4>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入 <em>rake preview</em> 命令，然后就能在浏览器中进行本地预览访问了： <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a>或<a href="http://localhost:4000/">http://localhost:4000/</a>，效果跟仓库中的一样。</p>

<h4>提交源码用于备份</h4>

<p>前面提到的deploy只是部署博客代码到github上面，整个octopress并没有提交，为了保证在任何地方随时发布博客，而无需再次详细配置以保证跟github上的最新代码一致，可以将当前octopress的源码存放到github的source分支下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.新建博文</h2>

<p><a id="post_blog">新建博文</a>也非常简单，octopress已经预定义了脚本 <strong><em>rake new_post[&ldquo;title&rdquo;]</em></strong> 方便我们操作，因为Jekyll有一套固定的文档路径以及命名规范，需要按照它的规定来实现才能成功生成博文。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>new_post执行后会自动新建博文，并在相应的markdown文件中写入yaml元数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;title&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2013-08-03 16:36</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的categories是自定义的分类名，支持的定义方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># One category</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Sass</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Multiple categories example 1</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">CSS3</span><span class="p-Indicator">,</span> <span class="nv">Sass</span><span class="p-Indicator">,</span> <span class="nv">Media Queries</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Multiple categories example 2</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">CSS3</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Sass</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Media Queries</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，还支持 <strong><em>author: Your Name</em></strong> 来指明作者，支持 <strong><em>published: false</em></strong> 表明当前博文是草稿暂时不发布。</p>

<h4>发布博文完整流程：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;New Post&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c">#edit the file source/_posts/{DATETIME}-New-Post.markdown</span>
</span><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git commit -am <span class="s2">&quot;Some comment here.&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h4>新建页面</h4>

<p>你可以在博客源目录下任意地方添加页面，Jekyll会自动拼接，对应的url地址也会根据页面路径自动生成 ，如果要添加 <strong><em>about.markdown</em></strong> ，那么就会生成 <strong><em>site.com/about.html</em></strong> ，如果你想要的url地址是 <strong><em>site.com/about/</em></strong> ,你需要新建的页面应该是 <strong><em>about/index.markdown</em></strong> .同样的，octopress也有脚本完成这个操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span>super-awesome<span class="o">]</span>
</span><span class='line'><span class="c"># creates /source/super-awesome/index.markdown</span>
</span><span class='line'>
</span><span class='line'>rake new_page<span class="o">[</span>super-awesome/page.html<span class="o">]</span>
</span><span class='line'><span class="c"># creates /source/super-awesome/page.html</span>
</span></code></pre></td></tr></table></div></figure>


<p>像发布博文一样，默认后缀依然是markdown，但是你可以再Rakefile中修改这个默认配置；一个干净的页面文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: <span class="s2">&quot;Super Awesome&quot;</span>
</span><span class='line'>date: 2011-07-03 5:59
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>sharing: <span class="nb">true</span>
</span><span class='line'>footer: <span class="nb">true</span>
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>这里的title来自于文件名。你也可以手动修改。跟博文的一样，除了不包含分类 categories，对于 <strong><em>sharing</em></strong> 和 <strong><em>comments</em></strong>  你可以关闭，对于 <strong><em>footer</em></strong>   你可以删除，这样就不会添加默认的footer信息到该页面；如果你不像要再页面中显示日期，可以删除这里的 <strong><em>date</em></strong> 。</p>

<h4>内容</h4>

<p>页面和博文会调用markup 引擎渲染，默认引擎是再配置文件中；此外，你可以使用任何<a href="http://jekyllrb.com/docs/variables/">Jekyll docs</a>中所介绍的<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">模板特性</a>。</p>

<p>默认首页是显示全文，要想仅仅显示摘要，请在合适的地方插入下面的代码</p>

<pre><code> &lt;!-- more --&gt;
</code></pre>

<p>这个会生成一个&#8221;Continue →&#8221; 链接来指向完整博文，这个跟wordpress的一样。</p>

<h2>6.小结</h2>

<p><a id="ruby_git_install">本文</a>主要是介绍如何利用octopress再github上搭建 一个博客，简述了完整步骤，同时介绍了博客涉及到的最常用的发布博文以及新建页面功能。</p>

<p>更加高级一点的如自定义域名、评论系统、分享等后文会详述。其实就是前面省略的_config.yml配置文件的后面两大块。</p>

<h2>参考链接：</h2>

<ol>
<li><a href="http://octopress.org/docs/">octopress</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家</a></li>
<li><a href="http://allenyee.me/blog/2013/08/21/what-i-learned-from-hosting-octopress-on-github/">第一次rake deploy报错</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog Using Octopress With Github Page]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/08/24/new-blog-using-octopress-with-github-page/"/>
    <updated>2014-08-24T10:57:29+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/08/24/new-blog-using-octopress-with-github-page</id>
    <content type="html"><![CDATA[<p>这是利用octopress生成blog部署在github上的第一篇博客，也是一个<strong><em>Hello World</em></strong>。</p>

<p>后面会逐渐以这个平台为主发布自己的博客，老的wordpress里的老文章会挑选大部分过来，如有可能，两个平台都会更新的。</p>

<p>^_^  后面的请无视，测试并熟悉一下markdown而已</p>

<!-- more -->


<h1>一级标题</h1>

<h2>二级标题</h2>

<h3>三级标题</h3>

<h4>四级标题</h4>

<h5>五级？</h5>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c">#这里测试代码</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello World !&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><p>这里是引用，</p></blockquote>

<hr />

<ul>
<li>你懂的</li>
<li>我也懂</li>
<li>大家懂</li>
</ul>


<hr />

<ol>
<li>第一条</li>
<li>第二条</li>
<li>第三条</li>
</ol>


<hr />

<p>这里我需要<a href="http://blog.itzhoulin.com">连接</a></p>

<hr />

<p>传图却是一件相对而言麻烦一点点的事。
看个美女放松一下
<img class="center" src="http://blog.itzhoulin.com/images/2014-08-24-1-helloworld.jpg" title="[图片测试] [图片测试]" ></p>
]]></content>
  </entry>
  
</feed>
