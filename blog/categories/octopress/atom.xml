<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | zhoulin的IT工作之旅]]></title>
  <link href="http://blog.itzhoulin.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://blog.itzhoulin.com/"/>
  <updated>2015-01-11T01:37:27+08:00</updated>
  <id>http://blog.itzhoulin.com/</id>
  <author>
    <name><![CDATA[zhoulin]]></name>
    <email><![CDATA[zhoulin@itzhoulin.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy a Blog Using Octopress Hosted in Github]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/08/24/deploy-a-blog-using-octopress-hosted-in-github/"/>
    <updated>2014-08-24T14:28:54+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/08/24/deploy-a-blog-using-octopress-hosted-in-github</id>
    <content type="html"><![CDATA[<p>这里将详细讲解一下如何利用octopress在github上部署一个博客程序，既方便写博客又无需考虑托管问题，同时天然的在本地有一个备份，所有操作都基于git，有无限版本控制。使用markdown书写具体的博客内容，自带代码高亮解决方案。</p>

<p>github使用的博客引擎是<strong>Jekyll</strong>，octopress也是利用Jekyll引擎来开发博客的，因此生成的博客系统可以直接在github pages上运行良好。</p>

<!-- more -->


<h2>环境说明:</h2>

<p>本地环境是在ubuntukylin14.04.1系统下部署的，其他系统也没问题，只需要支持ruby，git</p>

<p>本文主要参照octopress官网和破船之家的教程写的。</p>

<h2>目录</h2>

<ol>
<li><a href="#ruby_git_install">Ruby等依赖安装</a></li>
<li><a href="#octopress_install">octopress安装</a></li>
<li><a href="#octopress_config">octopress配置</a></li>
<li><a href="#deploy2github">部署到github</a></li>
<li><a href="#post_blog">发布博客</a></li>
<li><a href="#summary">小结</a></li>
</ol>


<h2>1.Ruby等依赖安装</h2>

<p><a id="ruby_git_install">Ruby </a>需要1.9.3版本的，同时由于Jekyll和octopress都是ruby写的，会有诸多ruby依赖，建议切换ruby源为国内源。对于git版本没有太大要求。</p>

<h4>Install Ruby</h4>

<p>查看ruby版本方法如下</p>

<pre><code>ruby --version
</code></pre>

<p>如果版本符合要求则进入下一步，否则请参照<a href="https://www.ruby-lang.org/en/downloads/">官方手册安装ruby</a>或者使用<a href="http://octopress.org/docs/setup/rvm/">RVM</a>来安装。</p>

<h4>安装bundler</h4>

<p>bundle可以自动解决依赖，安装方法如下：</p>

<pre><code>gem install bundler
</code></pre>

<p>建议国内用户切换gem源为国内源，方法如下：</p>

<pre><code class="bash">#删除官方源
gem source -r https://rubygems.org/
#添加淘宝源
gem source -a http://ruby.taobao.org/
#查看当前源
gem source -l
</code></pre>

<h4>安装git</h4>

<p>如果已经安装git，执行命令返回值为具体版本，否则请自行<a href="http://git-scm.com/">安装git</a></p>

<pre><code>git --version
#git version 1.9.1
</code></pre>

<h2>2.octopress安装</h2>

<p><a id="octopress_install">octopress </a>的安装也比较简单，下载源码后会有Gemfile文件来指示所有依赖，使用bundle即可。</p>

<h4>下载源码</h4>

<pre><code class="bash">git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<h4>安装octopress</h4>

<p>使用bundle自动安装，将下面的内容写入文件Gemfile中放在站点仓库根目录下</p>

<pre><code>source "http://ruby.taobao.org"
gem 'github-pages'
</code></pre>

<p>这样执行命令<strong><em>bundle install</em></strong>就会自动安装所有octopress及其所有依赖。</p>

<p><strong>注意：</strong>
如果上面的命令执行失败，提示下面的错误：</p>

<pre><code>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /usr/bin/ruby1.9.1 extconf.rb 
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
</code></pre>

<p>请执行下面的命令安装ruby1.9.1-dev</p>

<pre><code>sudo apt-get install ruby1.9.1-dev
</code></pre>

<h4>安装octopress默认主题</h4>

<pre><code>rake install
</code></pre>

<p>在octopress根目录下的Rakefile定义了如何将octopress跟Jekyll连接起来，rake打包了一些常见的如发布博客主题、生成博客数据、发布博客等一系列命令来简化博主的操作。直接使用Jekyll每一个任务都需要不少命令和文件编辑。</p>

<h4>tips： 保持Jekyll最新</h4>

<p>由于Jekyll更新比较频繁，为了确保你在本地调试的时候看到的网站效果跟GitHub Pages上的一致，务必时常更新Jekyll，推荐使用bundle更新，命令如下：</p>

<pre><code>bundle update
</code></pre>

<h2>3.octopress配置</h2>

<p>实际上octopress已经很好的隐藏了Jekyll的诸多配置，我们只需要简单操作几个文件。octopress就会自动生成相应的Jekyll配置。这里我们仅仅讲解一下_config.yml文件的部分配置项，具体请看官网<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a>。</p>

<p>该文件的配置分为三大部分:Main config、Jekyll&amp;Plugin、3rd Party Settings。</p>

<h4>Main config</h4>

<pre><code class="yaml">url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby's date strftime syntax
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
</code></pre>

<p>注释说明已经很详细了，有一点需要强调的是，<strong>如果你想启用自己的域名来访问，这里的url务必修改为你自己的域名，否则即便你添加了CNAME文件，使用rake部署的时候也不会部署该CNAME文件</strong>。</p>

<p><strong><em>建议：</em></strong></p>

<ul>
<li>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。涉及到的文件比较多，小心删除，如果以发表博客，_deploy目录下无需手动删除，重新生成博客后会自动删除。</li>
<li>同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。from<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的博文中—配置</a></li>
</ul>


<p><strong>关于另外两部分配置后面会有文详细介绍，这里略过。</strong></p>

<h2>4.部署到github</h2>

<p><a id="deploy2github">github pages</a>支持托管，地址为<a href="https://pages.github.com/">https://pages.github.com/</a>。在这个页面你只需要大概了解一下什么事github page，如何申请就行了。</p>

<ol>
<li>新建一个仓库，名为your_user_name.github.io或organization.github.io，当然也可以是project，这个方法有点不一样，这里以your_user_name.github.io为例。</li>
<li>在octopress根目录执行 <em>rake setup_github_pages</em> ，按照要求输入仓库地址等，这个命令会在跟目录下新建_deploy目录，这个会push到仓库的master分支，也就是访问博客的文件。</li>
<li>生成博客， <em>rake generate</em> 这个会按照既定规则生成静态文件的博客。</li>
<li>发布博客， <em>rake deploy</em> 将前一步生成的bo9ke拷贝到_deploy目录并push到github</li>
</ol>


<p><strong>注意：</strong></p>

<p>第一次执行 <em>rake deploy</em> 的时候会报错如下：
<code>bash
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/yeesterbunny/yeesterbunny.github.com.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></p>

<p>解决方法是手动进入_deploy目录手动强制push一次。
<code>bash
cd octopress/_deploy
git pull origin +master
cd ..
rake deploy
</code>
这样再次执行就不会报错了。</p>

<h4>博客本地预览</h4>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入 <em>rake preview</em> 命令，然后就能在浏览器中进行本地预览访问了： <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a>或<a href="http://localhost:4000/">http://localhost:4000/</a>，效果跟仓库中的一样。</p>

<h4>提交源码用于备份</h4>

<p>前面提到的deploy只是部署博客代码到github上面，整个octopress并没有提交，为了保证在任何地方随时发布博客，而无需再次详细配置以保证跟github上的最新代码一致，可以将当前octopress的源码存放到github的source分支下：
<code>bash
$ git add .
$ git commit -m 'Initial source commit'
$ git push origin source
</code></p>

<h2>5.新建博文</h2>

<p><a id="post_blog">新建博文</a>也非常简单，octopress已经预定义了脚本 <strong><em>rake new_post[&ldquo;title&rdquo;]</em></strong> 方便我们操作，因为Jekyll有一套固定的文档路径以及命名规范，需要按照它的规定来实现才能成功生成博文。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>new_post执行后会自动新建博文，并在相应的markdown文件中写入yaml元数据。</p>

<pre><code class="yaml">---
layout: post
title: "title"
date: 2013-08-03 16:36
comments: true
categories: 
---
</code></pre>

<p>这里的categories是自定义的分类名，支持的定义方式如下：
&#8220;`yaml</p>

<h1>One category</h1>

<p>categories: Sass</p>

<h1>Multiple categories example 1</h1>

<p>categories: [CSS3, Sass, Media Queries]</p>

<h1>Multiple categories example 2</h1>

<p>categories:
- CSS3
- Sass
- Media Queries
&#8220;`
除此之外，还支持 <strong><em>author: Your Name</em></strong> 来指明作者，支持 <strong><em>published: false</em></strong> 表明当前博文是草稿暂时不发布。</p>

<h4>发布博文完整流程：</h4>

<pre><code class="bash">rake new_post["New Post"]
#edit the file source/_posts/{DATETIME}-New-Post.markdown
rake generate
git add .
git commit -am "Some comment here." 
git push origin source
rake deploy
</code></pre>

<h4>新建页面</h4>

<p>你可以在博客源目录下任意地方添加页面，Jekyll会自动拼接，对应的url地址也会根据页面路径自动生成 ，如果要添加 <strong><em>about.markdown</em></strong> ，那么就会生成 <strong><em>site.com/about.html</em></strong> ，如果你想要的url地址是 <strong><em>site.com/about/</em></strong> ,你需要新建的页面应该是 <strong><em>about/index.markdown</em></strong> .同样的，octopress也有脚本完成这个操作。
&#8220;`
rake new_page[super-awesome]</p>

<h1>creates /source/super-awesome/index.markdown</h1>

<p>rake new_page[super-awesome/page.html]</p>

<h1>creates /source/super-awesome/page.html</h1>

<pre><code>
像发布博文一样，默认后缀依然是markdown，但是你可以再Rakefile中修改这个默认配置；一个干净的页面文件如下：
</code></pre>

<hr />

<p>layout: page
title: &ldquo;Super Awesome&rdquo;
date: 2011-07-03 5:59
comments: true
sharing: true</p>

<h2>footer: true</h2>

<p>&#8220;`
这里的title来自于文件名。你也可以手动修改。跟博文的一样，除了不包含分类 categories，对于 <strong><em>sharing</em></strong> 和 <strong><em>comments</em></strong>  你可以关闭，对于 <strong><em>footer</em></strong>   你可以删除，这样就不会添加默认的footer信息到该页面；如果你不像要再页面中显示日期，可以删除这里的 <strong><em>date</em></strong> 。</p>

<h4>内容</h4>

<p>页面和博文会调用markup 引擎渲染，默认引擎是再配置文件中；此外，你可以使用任何<a href="http://jekyllrb.com/docs/variables/">Jekyll docs</a>中所介绍的<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">模板特性</a>。</p>

<p>默认首页是显示全文，要想仅仅显示摘要，请在合适的地方插入下面的代码</p>

<pre><code> &lt;!-- more --&gt;
</code></pre>

<p>这个会生成一个&#8221;Continue →&#8221; 链接来指向完整博文，这个跟wordpress的一样。</p>

<h2>6.小结</h2>

<p><a id="ruby_git_install">本文</a>主要是介绍如何利用octopress再github上搭建 一个博客，简述了完整步骤，同时介绍了博客涉及到的最常用的发布博文以及新建页面功能。</p>

<p>更加高级一点的如自定义域名、评论系统、分享等后文会详述。其实就是前面省略的_config.yml配置文件的后面两大块。</p>

<h2>参考链接：</h2>

<ol>
<li><a href="http://octopress.org/docs/">octopress</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家</a></li>
<li><a href="http://allenyee.me/blog/2013/08/21/what-i-learned-from-hosting-octopress-on-github/">第一次rake deploy报错</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
