<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | zhoulin的IT工作之旅]]></title>
  <link href="http://blog.itzhoulin.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.itzhoulin.com/"/>
  <updated>2015-01-11T01:37:27+08:00</updated>
  <id>http://blog.itzhoulin.com/</id>
  <author>
    <name><![CDATA[zhoulin]]></name>
    <email><![CDATA[zhoulin@itzhoulin.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Workflow for Small Team]]></title>
    <link href="http://blog.itzhoulin.com/blog/2015/01/10/git-workflow-for-small-team/"/>
    <updated>2015-01-10T22:21:07+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2015/01/10/git-workflow-for-small-team</id>
    <content type="html"><![CDATA[<p>本文主要是讲述我目前所在小团队的一种git工作流，我们团队对于git都是新手，很新很新的新手，这里跟大家分享一下我们的流程和相关操作命令，也不确定这种是否真是适合我们的工作流方式，期待高手指点。</p>

<p><em>PS:对于git常用操作流程和一些概念见博文<a href="/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong/">Git常用操作汇总</a></em></p>

<!-- more -->


<p>git太博大精深了，不同的团队规模、不同时期或者其他因素都可能会有不同的最适宜的工作流。目前我们团队固定开发人员4人，不定期支撑1人（高手），没有专职的测试QA等，主要是针对已有产品的二次开发，因此更多的是部分功能上的改造和一些bug的修复，因此基本是发现了、有需求了、谁手头比较空余就来负责这个任务。</p>

<p>下图是一个简单的流程图，这里面主要是两种人物角色，A是开发人员，B是除A外的其他开发人员，这里兼职测试（后文标题以<strong>人员.操作步骤</strong>）。本文以gitlab里面的库<a href="http://git.itzhoulin.com/zhoulin/test.git">http://git.itzhoulin.com/zhoulin/test.git</a>为例，远程库除了master分之外还有develop分支，<strong><em>master存放随时可以发布的版本，develop存放经测试通过的任务</em></strong>。</p>

<p><img class="center" src="/images/git-workflow.png" title="git-workflow" ></p>

<h2>A.1克隆代码到本地</h2>

<p>如果A本地还没有远程库的代码，执行下述clone操作获取远程库所有代码信息：</p>

<pre><code>git clone http://git.itzhoulin.com/zhoulin/test.git
</code></pre>

<p>如果A本地已经有代码，则只需<strong>更新所有代码到最新版</strong>：</p>

<pre><code>#更新远程库所有信息到本地
git fetch origin
</code></pre>

<h2>A.2主分支基础上新建功能分支branchA</h2>

<p>develop作为开发的主分支，所有开发都需要基于该分支的最新代码进行开发，后续开发完成也合并到该分支。因此首先以远程库中的develop的最新代码为蓝本新建本地branchA分支。</p>

<p><em>PS:关于branchA的命名我们比较倾向于以成员名加日期或者所开发的功能点。</em></p>

<pre><code>#基于远程develop库新建branchA分支，并切换
git checkout -b branchA origin/develop
</code></pre>

<h2>A.4进行开发并提交到branchA</h2>

<p>A用户完成开发任务后提交到本地branchA分支，<strong>强烈建议不要等到所有开发完成后再提交，而是每一次提交都是针对一个不可分割的点，多几次提交以便于保留更多状态</strong>。</p>

<pre><code>#添加修改的文件
git add .
#提交,会调用默认文本处理程序，请在其中详细注明所做更改以及本次修改是否需要额外的部署操作
git commit
</code></pre>

<p>等到所有开发完成后，并将该分支推送到远程仓库，方便测试人员从远程仓库拉取到本地进行测试。</p>

<pre><code>git  push -u origin branchA
</code></pre>

<p>这样操作之后，所有用户都能看到分支branchA，通知B用户进行测试。</p>

<h2>B.1从远程拉取测试分支</h2>

<p>B用户需要先从远程库拉取需要测试的分支branchA到本地分支branchAtest：</p>

<pre><code>git fetch origin branchA:branchAtest
</code></pre>

<p>测试之后如果发现不通过，则将相关信息反馈给A用户进行重新修复开发；</p>

<h2>B.4合并branchA</h2>

<p>如果通过，就可以考虑将该分支合并到主库develop，同时删除该分支。</p>

<pre><code>#切换到develop分支（假设期间develop分支没有变更）
git checkout develop
#合并本次开发的代码到develop
git merge branchAtest
#如果没有冲突直接推送到远程
git push -u origin develop
</code></pre>

<p><strong>注意:</strong>
如果在完成测试前develop分支已经发生变更，需要先更新develop分支之后再执行合并操作，合并过程中可能会有冲突发生，需要进行手动冲突解决，然后也需要进行一定范围测试保证本次更新不会跟其他更新有冲突。</p>

<h4>如果有冲突，手动解决后重新测试提交</h4>

<pre><code>#冲突的文件需要重新添加到暂存区，不冲突的会自动加入到暂存区
git add conflictFile1
git commit
git push -u origin develop
</code></pre>

<h4>如果期间develop有过更新</h4>

<pre><code>#需要先更新本地develop代码
git checkout develop
git pull
#再合并代码
git merge branchA
#如遇冲突解决方法同上。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用操作汇总]]></title>
    <link href="http://blog.itzhoulin.com/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong/"/>
    <updated>2014-11-09T21:37:14+08:00</updated>
    <id>http://blog.itzhoulin.com/blog/2014/11/09/gitchang-yong-cao-zuo-hui-zong</id>
    <content type="html"><![CDATA[<p>关于git其实用的时间还很短，两个月前因为异地多个环境需要同步开发和维护，因此试着用了git，代码使用的开源中国的私有仓库。关于github现在更多的只是阅读别人的代码学习别人的代码，还没有实实在在贡献过代码，晚上看伯乐在线推荐了一篇关于git的文章，原文连接是<a href="http://yanhaijing.com/git/2014/11/01/my-git-note/">我的git笔记</a>,先根据这个再加上我前段时间已经实实在在用上了的做一些我的补充说明。感谢原作者。</p>

<!-- more -->


<h1>推荐两本书：</h1>

<p>作者是 北京群英汇信息技术有限公司 高级顾问 蒋鑫</p>

<p><a href="http://www.worldhello.net/gotgit/">Git权威指南</a></p>

<p><a href="http://www.worldhello.net/gotgithub/">GotGitHub</a></p>

<h1>配置</h1>

<p>首先是配置帐号信息</p>

<pre><code>git config --global user.name yanhaijing
git config --global user.email yanhaijing@yeah.net

git config --list    #查看配置的信息

git help config    #获取帮助信息
</code></pre>

<h4>配置自动换行（自动转换坑太大）</h4>

<pre><code>git config --global core.autocrlf input    #提交到git是自动将换行符转换为lf
</code></pre>

<h4>配置密钥</h4>

<pre><code>ssh-keygen -t rsa -C yanhaijing@yeah.net     #生成密钥

ssh -T git@github.com     #测试是否成功
</code></pre>

<h1>新建仓库</h1>

<pre><code>git init                                    #初始化
git status                                  #获取状态
#上面的命令可以查看当前所处的分支，当前工作区变更记录等，很常用
git add file                                #.或*代表全部添加
git commit -m "message"                     #此处注意乱码
git remote add origin git@github.com:yanhaijing/test.git   #添加源
git push -u origin master                   #push同时设置默认跟踪分支
</code></pre>

<h1>从现有仓库克隆</h1>

<pre><code>git clone git://github.com/yanhaijing/data.js.git   
git clone git://github.com/schacon/grit.git mypro     #克隆到自定义文件夹
</code></pre>

<h1>本地</h1>

<pre><code>git add *                 #跟踪所有变更文件：编辑和新增

rm *&amp;git rm *             #移除文件
git rm -f *               #移除文件
git rm --cached *         #取消跟踪
git mv file_from file_to  #重命名跟踪文件

git log                   #查看提交记录

git commit                #提交更新
git commit -m 'message'
git commit -a             #把所有已经跟踪过的文件暂存并提交
### 上述命令的一个关键是已经跟踪过的文件，而对于新增文件是不会将其添加跟踪并提交的
git commit --amend        #修改最后一次提交的message信息

git reset HEAD *          #取消已经暂存(git add)的文件

git checkout -- file      #取消对文件的修改（从暂存区去除file）
git checkout branch|tag|commit -- file_name   #从仓库取出file覆盖当前分支
git checkout -- .         #从暂存区去除文件覆盖工作区
</code></pre>

<h1>分支</h1>

<pre><code>git branch                  #列出本地分支
git branch -r               #列出远端分支
git branch -a               #列出所有分支
git branch -v               #查看各个分支最后一个提交对象的信息
git branch --merge          #查看已经合并到当前分支的分支
git branch --no-merge       #查看为合并到当前分支的分支

git branch test             #新建test分支
git checkout test           #切换到test分支
git checkout -b test        #新建+切换到test分支
git checkout -b test dev    #基于dev新建test分支，并切换

git branch -d test          #删除test分支
git branch -D test          #强制删除test分支

git merge test              #将test分支合并到当前分支
git rebase master           #将master分之上超前的提交，变基到当前分支
</code></pre>

<h1>远端</h1>

<pre><code>git fetch origin                               #更新本地数据，拉取远端所有分支
git fetch originname branchname                #拉取远端上指定分支
git fetch originname branchname:temp           #拉取远端分支到本地分支temp
## 这个是我目前协同主要用到的，我会先将远端同事的分支先拉去到本地临时分支
##temp，再将该temp与我自己的分支合并。

git merge originname branchname                #合并远端上指定分支
git push originname branchname                 #推送到远端上指定分支
git push originname localbranch:serverbranch   #推送到远端上指定分支

git checkout -b test origin/dev                #基于远端dev新建test分支

git push origin :server                        #删除远端分支
</code></pre>

<h1>源</h1>

<p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</p>

<p>个人开发时，多源用的可能不多，但多源其实非常有用。</p>

<pre><code>git remote add origin1 git@github.com:yanhaijing/data.js.git

git remote                            #显示全部源
git remote -v                         #显示全部源+详细信息

git remote rename origin1 origin2     #重命名

git remote rm origin1                 #删除

git remote show origin1               #查看指定源的全部信息
</code></pre>

<h1>标签</h1>

<p>当开发到一定阶段时，给程序打标签是非常棒的功能。</p>

<pre><code>git tag                                      #列出现有标签  
git tag v0.1                                 #新建标签
git tag -a v0.1 -m 'my version 1.4'          #新建带注释标签

git checkout tagname                         #切换到标签

git push origin v1.5                         #推送分支到源上
git push origin --tags                       #一次性推送所有分支

git tag -d v0.1                              #删除标签
git push origin :refs/tags/v0.1              #删除远程标签
</code></pre>

<h1>比较diff</h1>

<p>在没有使用github等web界面来查看某一次提交的代码级别的变更记录时，使用git diff就相当有作用。</p>

<h4>查看当前版本变化情况</h4>

<pre><code>git status
位于分支 master
您的分支与上游分支 'origin/master' 一致。

尚未暂存以备提交的变更：
  （使用 "git add &lt;file&gt;..." 更新要提交的内容）
  （使用 "git checkout -- &lt;file&gt;..." 丢弃工作区的改动）

    修改:         soft-install/calamari-client-build.md

未跟踪的文件:
  （使用 "git add &lt;file&gt;..." 以包含要提交的内容）

    git-guide/
    zmanda_guides/

修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
</code></pre>

<h4>查看已跟踪文件修改</h4>

<pre><code>zhoulin@gcizhoulin:~/Documents/guides-markdown$ git diff README.md
diff --git a/README.md b/README.md
index ae4e84e..2e76687 100644
--- a/README.md
+++ b/README.md
@@ -28,4 +28,7 @@ The main folders are:

 * 直接tab后接代码就能够以代码方式显示，**要求：**代码前后各有一个回车
 * 前后使用**```**来分割，前后如*至少*有一处有空行则类似pre显示代码；如果是前有
-* 如果是在**列表项**里面添加代码，请务必用**```**来区别代码.
\ No newline at end of file
+* 如果是在**列表项**里面添加代码，请务必用**```**来区别代码.
+
+### 2.标题显示
+要显示标题样式，除了使用#来标记外，还需要再#标记和文字之间加空格
\ No newline at end of file
</code></pre>

<h4>对比两次版本的差异</h4>

<pre><code>#首先获取两版本的版本号
git log
#若是查看最近几次的记录后接- 加上数字，如
git log -2
#输出如下:
zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git log -2
commit ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Sat Aug 2 13:15:40 2014 +0800

#89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding

commit c80c87c358a26d5eaaca81e6bc82a87203ef2337
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Fri Aug 1 20:31:50 2014 +0800

#88: Ubuntu packaging: install python3-tk as a fallback to Qt.

#要对比上面两次版本的区别命令如下:
zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git diff ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd c80c87c358a26d5eaaca81e6bc82a87203ef2337
diff --git a/src/frontend/utils/misc.py b/src/frontend/utils/misc.py
index 3293bb3..23d77f6 100644
--- a/src/frontend/utils/misc.py
+++ b/src/frontend/utils/misc.py
@@ -26,12 +26,7 @@ def decodePrivateLink(link):
 assert len(path) == 1, "Invalid private link {}.".format(link)

 path = path[0].encode("utf-8")
-
-    toDecode = base64.urlsafe_b64decode(path)
-    try:
-        decoded = toDecode.decode("utf-8")
-    except UnicodeDecodeError:
-        decoded = toDecode.decode("gb18030")
+    decoded = base64.urlsafe_b64decode(path).decode("utf-8")

 scheme = scheme.lower()
 if scheme == "thunder":
</code></pre>

<h4>查看某一次版本详细信息（含与上一次对比）</h4>

<pre><code>git show
#输出为:
commit ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd
Author: xinkai &lt;xinkai.chen@qq.com&gt;
Date:   Sat Aug 2 13:15:40 2014 +0800

#89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding

diff --git a/src/frontend/utils/misc.py b/src/frontend/utils/misc.py
index 23d77f6..3293bb3 100644
--- a/src/frontend/utils/misc.py
+++ b/src/frontend/utils/misc.py
@@ -26,7 +26,12 @@ def decodePrivateLink(link):
     assert len(path) == 1, "Invalid private link {}.".format(link)

     path = path[0].encode("utf-8")
-    decoded = base64.urlsafe_b64decode(path).decode("utf-8")
+
+    toDecode = base64.urlsafe_b64decode(path)
+    try:
+        decoded = toDecode.decode("utf-8")
+    except UnicodeDecodeError:
+        decoded = toDecode.decode("gb18030")

 scheme = scheme.lower()
 if scheme == "thunder":
</code></pre>

<p>后面可以跟具体的<strong>版本号</strong></p>

<h4>查看某一个文件的变更记录</h4>

<pre><code>zhoulin@gcizhoulin:~/gitlab/XwareDesktop$ git log --pretty=oneline src/frontend/utils/misc.py
#输出如下：
ffc3f8677c98fb2d4e33eeb522eed48d42cf72cd #89: decodePrivateLink: when utf-8 decoding fails, try gb18030 decoding
b8974b512f9b43336fe2bc86f27143f6b2cfd4f5 trivial: pep8 fix
97e400716bd7b3f04f0d601ceef00a46ff5c8725 taskClassFilter use ENUMs instead of magic numbers in QML
bc2c822a33dc9ecd72d0ff7ec0b3c3884d3995ea split utils.misc to utils.system
0cfc211af54f0a4271e22ff87eeb9c0bea04bbb0 implement simplecache
4a42d59560d8580e41c1807597c9fb5c9b985482 place misc under utils
</code></pre>

<h1>参考资料</h1>

<ul>
<li><a href="http://gitref.org/zh/index.html">Git参考手册</a></li>
<li><a href="http://www.mceiba.com/tool/git-cheat-sheet.html">Git简明手册</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">Git Magic</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
<li><a href="http://git-scm.com/book/en/v2">Pro Git</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git-简明指南</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/">learnGitBranching</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
